
---------- Логика программы ----------

- иконка-шарик Инфопорта отображается в трее;
- при новых записях:
	- меняется цвет или появляется цифра количества новых записей
	- срабатывает звуковое уведомление;
	- всплывает уведомление с данными.
- при клике открывается окно, если оно закрыто и закрывается, если открыто;
- при наличии обновлений программа должна автоматически обновляться;

---------- Основное окно ----------

- последние сообщения
- последние темы
- последние новости
- последние публикации
- последние объявления

---------- Настройки ----------

- возможность включить/отключить звуковое уведомление;
- возможность включить/отключить всплывающие уведомления;
- выбор интервала проверки новых записей (5 минут, 10 минут, 15 минут, 20 минут, 30 минут, 1 час)
- выбор, какие отслеживать события, при этом какие вкладки должны отображаться
- проверять наличие обновлений приложения;
- показывать аватарки авторов из форума;
- запускать при старте

---------- TODO ----------
	цвет количества новых элементов красным
обнуление при прочтении
	добавление количества при всех последующих обновлениях
выбор, какие события отслеживать, сделать программно
настроить значок в трее (только в трее, убрать из панели задач)
сделать сегодняшние/вчерашние даты как "сегодня" и "вчера".
сделать один метод для всех событий клика по ссылкам

Описание:
когда хочется узнать о последних события, не заходят на сайт и даже не открывая браузер
если у вас стоит галочка автоматический вход и вы ходите знать о послених события, но при этом не "светиться" на форуме


---------- один обработчик для всех кликов ----------

DataGridView d = sender as DataGridView;

            if (e.ColumnIndex == 0 && d != null)
            {
                DataGridViewCell clickCell = new DataGridViewLinkCell();

                switch (d.Name)
                {
                    case "dataGridViewTopics":
                        clickCell = dataGridViewTopics.Rows[e.RowIndex].Cells[e.ColumnIndex];
                        break;
                    case "dataGridViewPosts":
                        clickCell = dataGridViewPosts.Rows[e.RowIndex].Cells[e.ColumnIndex];
                        break;
                    case "dataGridViewNews":
                        clickCell = dataGridViewNews.Rows[e.RowIndex].Cells[e.ColumnIndex];
                        break;
                    case "dataGridViewPublications":
                        clickCell = dataGridViewPublications.Rows[e.RowIndex].Cells[e.ColumnIndex];
                        break;
                    case "dataGridViewAds":
                        clickCell = dataGridViewAds.Rows[e.RowIndex].Cells[e.ColumnIndex];
                        break;
                }
                System.Diagnostics.Process.Start((string)clickCell.Tag);
            }